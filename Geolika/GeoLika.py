# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoLika
                                 A QGIS plugin
 Geocoding für Liegenschaft
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-12-09
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Cheick
        email                : cheick.cherif-haidara@stud.hs-bochum.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt 
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction , QMessageBox#,QApplication, QDialog
from qgis.core import QgsVectorLayer,  QgsProject, QgsRasterLayer #,QgsGeometry,QgsMapLayer
import requests
from PyQt5 import uic
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GeoLika_dialog import GeoLikaDialog
#from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.uic import loadUi
#import processing
#from qgis.gui import *




import sys



import os.path

#class dialogAdresse(QDialog):
#    def __init__(self):
#        super(Dialog,self).__init__()
#        loadUi("adresse.ui",self)
#        self.setupUi(self)
#class dialogFlur(QDialog):
#    def __init__(self):
#        super(Dialog,self).__init__()
#        loadUi("flur.ui",self)
#        self.setupUi(self)

class GeoLika:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoLika_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GeoLika')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.baseMap=True
        



        
    

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoLika', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    

    

    
    
 

    

    def anschrift(self,iface):
       
       #self.iface.addRasterLayer("http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer?f=json&pretty=true","World_raster")
        wms_url="crs=EPSG:3034&dpiMode=7&format=image/png&layers=nw_dtk_col&styles&url=https://www.wms.nrw.de/geobasis/wms_nw_dtk"
        #rlayer = QgsRasterLayer(wms_url, 'nrw_dtk_all', 'wms')

        if self.baseMap:
            self.baseMap = False
            rlayer = QgsRasterLayer(wms_url, 'nrw_dtk_all', 'wms')
            QgsProject.instance().addMapLayer(rlayer)

        
        adr=self.dlg.lineEditAdresse.text()
        #self.dlg.lineEditAdresse.clear()
        url="https://nominatim.openstreetmap.org/search?q="+adr+",Nordrhein-Westfalen&format=geojson&countrycodes=DE&polygon_geojson=1&limit=1"
        
        #self.dlg.lineEditAdresse.clear()

       
        # self.iface.messageBar().pushMessage("success","loading...",level=3)

        request=requests.get(url).text
        vlayer=QgsVectorLayer(request,adr,"ogr")
        #self.dlg.lineEditAdresse.clear()
        win=self.iface.mainWindow()
        #self.iface.addVectorLayer(request,"info","ogr")
        fea=vlayer.featureCount()
        if fea==0:
            QMessageBox.warning(win,"Error","ungültiger Layer \n"+adr+" ist nicht in NRW")
            self.iface.messageBar().pushMessage("Error","Layer kann nicht geladen werden",level=2)
            self.dlg.lineEditAdresse.clear()
            #return
            
        else:
            
           
            
        
            for feature in vlayer.getFeatures():
               
                
            
                info=("{display_name}".format(display_name=feature["display_name"]))
                QMessageBox.about(win,"Informationen",info)
                #info_2=info+"\nMöchten Sie reinzoomen?"
                #ret=QMessageBox.information(win,"Informationen",info_2,QMessageBox.No |QMessageBox.Yes, QMessageBox.No)
                #if ret !=QMessageBox.Yes:return       
                self.iface.addVectorLayer(request,info,"ogr")
                #self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
                self.iface.messageBar().pushMessage("Success","loading...",level=3)
                self.dlg.lineEditAdresse.clear()
            
        


        



        









    def parzelle(self,iface):
        wms_url="crs=EPSG:3034&dpiMode=7&format=image/png&layers=nw_dtk_col&styles&url=https://www.wms.nrw.de/geobasis/wms_nw_dtk"
        #rlayer = QgsRasterLayer(wms_url, 'nrw_dtk_all', 'wms')
       
       
        #QgsProject.instance().addMapLayer(QgsRasterLayer("crs=EPSG:3034&dpiMode=7&format=image/png&layers=nw_dtk_col&styles&url=https://www.wms.nrw.de/geobasis/wms_nw_dtk", 'some layer name', 'wms'))
        
        
        if self.baseMap:
            self.baseMap = False
            rlayer = QgsRasterLayer(wms_url, 'nrw_dtk_all', 'wms')
            QgsProject.instance().addMapLayer(rlayer)
            
            

        
           
       
        gemarkung="05"+self.dlg.lineEditGemarkung.text()
      
        flur=self.dlg.lineEditFlur.text()
        flurstueck=self.dlg.lineEditFlurstueck.text()
        kennzeichen=gemarkung+flur.zfill(3)+flurstueck.zfill(5)+"______?f=json"
        url="https://ogc-api.nrw.de/lika/v1/collections/flurstueck/items/"+kennzeichen
        vlayer=QgsVectorLayer(requests.get(url).text,gemarkung+flur.zfill(3)+flurstueck.zfill(5),"ogr")
        self.dlg.lineEditFlurstueck.clear()
        
        win=self.iface.mainWindow()
        #self.iface.addVectorLayer(requests.get(url).text,"info_2","ogr")
        #fea=vlayer.featureCount()
        #if fea==0:
            #QMessageBox.warning(win,"Error","ungültiger Layer \n"+kennzeichen+" ist nicht in NRW")
        #else:
        #self.iface.addVectorLayer(requests.get(url).text,"info_2","ogr")
        request=requests.get(url)
        if request.status_code!=200:
            QMessageBox.warning(win,"Error","ungültiger Layer \n"+kennzeichen+" ist nicht in korrekt")
            self.iface.messageBar().pushMessage("Error","Layer ist nicht ungültig:\n Der Layer ist kein gültiger Layer und kann nicht zur Karte hinzugefügt",level=2)
        else:
            

            for feature in vlayer.getFeatures():
           
            
            
                info=("Flurstückskennzeichen {id} \nFläche=  {flaeche} m² in Flur {flur}, Gemarkung {gemarkung} \nGemeinde= {gemeinde} \nKreis= {kreis} \nBezirkregierung= {regbezirk} \nLand= {land} \n{tntxt}".format(regbezirk=feature['regbezirk'],tntxt=feature['tntxt'],id=feature['id'],land=feature['land'],flaeche=feature['flaeche'],flur=feature['flur'],gemarkung=feature['gemarkung'],gemeinde=feature['gemeinde'],kreis=feature['kreis']))
                info_2=("Flurstückskennzeichen {id} \nin Flur {flur}\nGemarkung {gemarkung}".format(id=feature['id'],flur=feature['flur'],gemarkung=feature['gemarkung']))
                QMessageBox.about(win,"Informationen",info)
                #ret=QMessageBox.information(win,"Frage","Möchten Sie reinzoomen",QMessageBox.No |QMessageBox.Yes, QMessageBox.No)
                #if ret !=QMessageBox.Yes:return
                self.iface.addVectorLayer(requests.get(url).text,info_2,"ogr")
                self.iface.zoomToActiveLayer()
                self.iface.messageBar().pushMessage("Success","loading...",level=3)  
                #self.dlg.lineEditFlurstueck.clear()
            
       

        
     
        

        

    

       
        


  



   
        


        
    

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GeoLika/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GeoLika'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoLikaDialog()
     
#
       

        self.dlg.pushButtonSuche.clicked.connect(self.parzelle)
        
        self.dlg.pushButtonSucheAdresse.clicked.connect(self.anschrift)
        #self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
       
       
         

            


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
